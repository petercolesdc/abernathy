
// Typography specific mixins
// ------------------------------------------------------------------

// Tweak leading
@mixin leading_adjust($gapAdjust) {
	line-height: $lineheightBase - ($gapAdjust/$scaleRoot);
}

// Basline spacing with regular units
@mixin baseline($baselineMult, $type) {
	@if $type == "margin-bottom"  {
		margin-bottom: rem($gridBaseline*$baselineMult);
	} @else if $type == "margin-top"  {
		margin-top: rem($gridBaseline*$baselineMult);
	} @else if $type == "padding-bottom"  {
		padding-bottom: rem($gridBaseline*$baselineMult);
	} @else if $type == "padding-top"  {
		padding-top: rem($gridBaseline*$baselineMult);
	} @else {

	}
}

// CSS Grid calculations
// ------------------------------------------------------------------

// gridColGen
// Create col numbers on the fly
// Thanks: https://stackoverflow.com/questions/52164202/sass-scss-mixin-to-generate-css-grid-classes-need-additional-20px-gap-columns
@mixin gridColGen($gm, $gc) {
	$c: "";
  @for $i from 1 through $gc {
  	$c: $gm + " " + $c;
  }
  grid-template-columns: unquote($c);
}

// gridCalc
// Calculate the grid based on some defaults
@mixin gridCalc($GgridCols: $gridCols, $GgridColGap: $gridColGap, $GgridRowGap: $gridRowGap) {
	display: grid;
	@include gridColGen($gridUnit, $GgridCols);
	grid-column-gap: $GgridColGap;
	grid-row-gap: $GgridRowGap;
}

// gridCol
// In combination with gridCalc this detemines the start point & span of columns
@mixin gridCol($gridStart, $gridSpan) {
	grid-column: $gridStart / span $gridSpan;
}

// gridRow
// In combination with gridCalc this detemines the start point & span of rows
@mixin gridRow($rowNum) {
	grid-row: $rowNum;
}

// gridRepeat
// This should only be used for grids with the same width of columns that repeat
@mixin gridRepeat($colNumber, $GgridColGap: $gridColGap, $GgridRowGap: $gridRowGap) {
  display: grid;
  grid-template-columns: repeat($colNumber, $gridUnit);
  grid-column-gap: $GgridColGap;
  grid-row-gap: $GgridRowGap;
}


// Media queries
// Simplify the syntax and use variables for easy changes
// ------------------------------------------------------------------

// Widths only
@mixin respond-to($media-min) {
	@media screen and (min-width: $media-min) {
	    @content;
	}
}

@mixin respond-to-max($media-max) {
	@media screen and (max-width: $media-max - 1px) {
	    @content;
	}
}

@mixin respond-to-min-max($media-min, $media-max) {
	 @media screen and (min-width: $media-min) and (max-width: $media-max - 1px) {
	    @content;
	}
}

// Height only
@mixin respond-to-height($media-min) {
	@media screen and (min-height: $media-min) {
	    @content;
	}
}

@mixin respond-to-height-max($media-max) {
	@media screen and (max-height: $media-max - 1px) {
	    @content;
	}
}

// Both
@mixin respond-to-both($media-w-min, $media-h-min) {
	@media screen and (min-width: $media-w-min) and (min-height: $media-h-min) {
	    @content;
	}
}

@mixin respond-to-both-max-min($media-w-min, $media-h-min) {
	@media screen and (max-width: $media-w-min) and (min-height: $media-h-min - 1px) {
	    @content;
	}
}

// Interaction queries
// ------------------------------------------------------------------

// Bundle hover, focus and active together
@mixin link-active-styles {
	&:hover, &:focus, &:active {
		@content;
	}
}

// A11y hidden
// Hide things on the page in an accessible way (eg form labels)
// ------------------------------------------------------------------

@mixin a11yhide {
	position: absolute !important;
	clip: rect(1px, 1px, 1px, 1px);
	padding: 0px;
	border: 0 !important;
	height: 1px !important;
	width: 1px !important;
	overflow: hidden;
}

// Ratios
// Use maths to make responsive ratios (works great for video embeds)
// ------------------------------------------------------------------

@mixin ratio($ratio: 1 1) {
	//@if length($ratio) < 2 or length($ratio) > 2 { @warn "$ratio must be a list with two values."; }
	$ratio-width: 100%;
	$ratio-height: percentage(nth($ratio, 2) / nth($ratio, 1));
	width: $ratio-width;
	height: 0;
	padding-bottom: $ratio-height;
}

// Clearfix - Old Skool
// ------------------------------------------------------------------

@mixin pie-clearfix {
	&:after {
		content: "";
		display: table;
		clear: both;
    //*zoom: 1;
	}
}

// Sharpen type (use with care)
// ------------------------------------------------------------------

@mixin sharp-text {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	//text-rendering: optimizeLegibility;
}

// Animation
// ------------------------------------------------------------------

// HACKS - https://github.com/IanLunn/Hover/blob/master/scss/_hacks.scss
// As is often the case, some devices/browsers need additional code to get CSS to work
// in the most desired way. These mixins are used to quickly drop in hacks for each element
// Find out more here: https://github.com/IanLunn/Hover/wiki/Hacks-Explained

@mixin hardwareAccel() {
	// Improve performance on mobile/tablet devices
	// Perspective reduces blurryness of text in Chrome
	transform: perspective(1px) translateZ(0);
}

@mixin improveAntiAlias() {
	// Improve aliasing on mobile/tablet devices
	box-shadow: 0 0 1px rgba(0, 0, 0, 0);
}

@mixin forceBlockLevel() {
	// Transforms need to be block-level to work
	display: inline-block;
	vertical-align: middle;
}

@mixin animationHacks() {
	@include forceBlockLevel();
	@include hardwareAccel();
	@include improveAntiAlias();
}
